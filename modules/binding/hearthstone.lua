local _, addon = ...

local MESSAGE = string.format('Hearthstone %s', ITEM_COOLDOWN_TIME:lower())
local ASTRAL_RECALL = 556
local HEARTHSTONE = 6948
local HEARTHSTONE_TOYS = {
	-- generated by get_hearthstone_items.py
	54452,
	64488,
	93672,
	142542,
	162973,
	163045,
	163206,
	165669,
	165670,
	165802,
	166746,
	166747,
	168907,
	172179,
	180290,
	182773,
	183716,
	184353,
}

local COVENANT_REQUIREMENT = {
	-- hopefully this goes away in 9.1.5
	[180290] = 3, -- night fae
	[182773] = 4, -- necrolord
	[183716] = 2, -- venthyr
	[184353] = 1, -- kyrian
}

local function getCooldownRemaining(start, duration)
	return start > 0 and start - GetTime() + duration
end

local hearthstone = addon:CreateButton('BindHearthstone', nil, 'SecureActionButtonTemplate')
hearthstone:SetAttribute('type', 'macro')
hearthstone:RegisterEvent('PLAYER_LOGIN', function(self)
	SetBindingClick('SHIFT-BACKSPACE', self:GetName())

	-- set the default toy
	self:GetScript('PreClick')(self)

	return true
end)

hearthstone:SetScript('PreClick', function(self)
	if InCombatLockdown() then
		-- can't change attributes in combat, so we'll use whichever toy was used last
		return
	end

	local toys = {}
	local covenant = C_Covenants.GetActiveCovenantID()
	for _, itemID in next, HEARTHSTONE_TOYS do
		if PlayerHasToy(itemID) and C_ToyBox.IsToyUsable(itemID) then
			local covenantRequired = COVENANT_REQUIREMENT[itemID]
			if covenantRequired and covenantRequired == covenant then
				table.insert(toys, itemID)
			elseif not covenantRequired then
				table.insert(toys, itemID)
			end
		end
	end

	-- get a random toy
	local itemID
	if #toys > 0 then
		itemID = toys[math.random(#toys)]
	elseif GetItemCount(HEARTHSTONE) > 0 then
		itemID = HEARTHSTONE
	end

	local cooldown
	if itemID then
		cooldown = getCooldownRemaining(GetItemCooldown(itemID))
		if not cooldown then
			self:SetAttribute('macrotext', '/cast item:' .. itemID)
			return
		end
	end

	if IsSpellKnown(ASTRAL_RECALL) then
		cooldown = getCooldownRemaining(GetSpellCooldown(itemID))
		if not cooldown then
			self:SetAttribute('macrotext', '/cast ' .. (GetSpellInfo(ASTRAL_RECALL)))
			return
		end
	end

	if cooldown and cooldown >= 1 then
		UIErrorsFrame:AddMessage(MESSAGE:format(SecondsToTime(cooldown)))
	end
end)
